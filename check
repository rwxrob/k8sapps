#!/bin/bash

# This script automates the collection of k8sapp metadata and check
# scripts in order to check them all for needing an update or not. 

# (To activate tab completion: complete -C ./check ./check)

# --------------------------------------------------------------

# Fetches a URL (first argument) using curl and saves to the target
# (second argument). If target is omitted will use the last part of the
# URL back to the last slash (/) as the target name.

x.fetch.one() {
  local url="$1" target="$2"
  [[ -z "$target" ]] && target="${url##*/}"
  #printf "%s -> %s\n" "$url" "$target"
  code=$(curl -sSL "$url" -w '%{response_code}' -o "$target")
  if [[ $code == 200 ]];then
    return 0
  else
    if [[ -e "$target" ]];then
      rm "$target"
    fi
    #printf "Not found: %s\n" "$url"
    return 1
  fi
}

# Fetches the k8sapp.yaml metadata files and check scripts for each
# entry in the manifest and saves to metadata/$name.

x.fetch() {
  [[ -d metadata ]] && rm -rf metadata
  while IFS= read -r line; do
    local url="${line##* }" name="${line%% *}"
    mkdir -p "metadata/$name"
    cd "metadata/$name"  > /dev/null
    x.fetch.one "$url/check"
    [[ -e "check" ]] && chmod +x check
    x.fetch.one "$url/k8sapp.yaml"
    cd - > /dev/null
  done < manifest
}

# Runs the check for a given k8sapp from the manifest that has already
# been fetched. Returns true if the check succeeds and false for
# everything else, including a missing check script. Discards any output
# from the check script.

x.one() {
  local name="$1"
  [[ -z "$name" ]] && echo "Missing name" && return 1
  "metadata/$name/check" &>/dev/null
}

# Checks all the fetched k8sapps to see if they need an update. If not,
# 'no change' is printed after the name. Otherwise, 'update needed' is
# printed after the name.

x.all() {
  while IFS= read -r line; do
    local name="${line%% *}"
    if x.one "$name"; then
      printf "%s no change\n" "$name"
    else
      printf "%s update needed\n" "$name"
    fi
  done < manifest
}

# -------------------- tab completion ---------------------

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

# complete if completion context detect (complete -C kapp kapp)
if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

# delegate to COMMAND passed as first argument
if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

