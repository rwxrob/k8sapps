#!/bin/bash

# To activate tab completion: complete -C ./checkall ./checkall

x.fetch.one() {
  local url="$1" target="$2"
  [[ -z "$target" ]] && target="${url##*/}"
  #printf "%s -> %s\n" "$url" "$target"
  code=$(curl -sSL "$url" -w '%{response_code}' -o "$target")
  if [[ $code == 200 ]];then
    return 0
  else
    if [[ -e "$target" ]];then
      rm "$target"
    fi
    #printf "Not found: %s\n" "$url"
    return 1
  fi
}

x.fetch() {
  [[ -d metadata ]] && rm -rf metadata
  while IFS= read -r line; do
    local url="${line##* }" name="${line%% *}"
    mkdir -p "metadata/$name"
    cd "metadata/$name"  > /dev/null
    x.fetch.one "$url/check"
    [[ -e "check" ]] && chmod +x check
    x.fetch.one "$url/k8sapp.yaml"
    cd - > /dev/null
  done < manifest
}

# -------------------- tab completion ---------------------

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

# complete if completion context detect (complete -C kapp kapp)
if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

# delegate to COMMAND passed as first argument
if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

